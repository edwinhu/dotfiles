;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "John Doe"
      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "JetBrains Mono" :size 13.0 :dpi 96 :weight 'regular)
      doom-variable-pitch-font (font-spec :family "CMU Serif" :size 13.0 :dpi 96))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'catppuccin)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `add-hook!' for adding functions to hooks
;; - `quiet!' for suppressing output generated by a call to a function
;; - `pushnew!' for adding a new element to a list, avoiding duplicates
;; - `delq!' for deleting elements from lists
;; - `delete!' for deleting files or directories
;; - `define-key!' for binding keys
;; - `undefine-key!' for unbinding keys

;;; ================================================================
;;;                UNIFIED EUPORIE INTEGRATION ARCHITECTURE
;;; ================================================================

;; Load euporie termint integration
(let ((doom-dir (or (bound-and-true-p doom-user-dir)
                   (expand-file-name "~/.doom.d/"))))
  (load (expand-file-name "euporie-termint.el" doom-dir)))

;; Global termint configuration
(setq termint-backend 'eat)

;; Hook into org-mode for unified euporie integration
(add-hook 'org-mode-hook 
  (lambda ()
    ;; Essential org-babel configuration
    (setq org-src-fontify-natively t
          org-src-preserve-indentation t 
          org-src-tab-acts-natively t)
    
    ;; Org-babel language support (now handled by euporie-unified.el)
    (setq org-babel-load-languages '((emacs-lisp . t)
                                     (python . t)
                                     (R . t)
                                     (stata . t)
                                     (sas . t)))
    
    ;; Essential org-src window setup
    (setq org-src-window-setup 'current-window
          org-support-shift-select 'always)))

;; Doom-specific configuration that needs to run after doom loads
(after! org
  ;; CRITICAL: Popup rules for org-src buffers - required for org-edit-src-code
  (set-popup-rule! "^\\*Org Src" :ignore t)
  (set-popup-rule! "^\\*SAS Console" :ignore t)

  ;; Note: Keybindings moved to hooks at end of file for proper override
  )

;; Claude Code IDE configuration (moved to separate file for better organization)
(load! "claude-code-config")

;; Load SAS org-babel integration
(load! "ob-sas")

;;; ================================================================
;;;                          KEYBINDINGS
;;; ================================================================

;; Set up Shift-Enter keybinding for euporie in org-src buffers (avoiding Doom C-RET conflicts)
(add-hook 'org-src-mode-hook
  (lambda ()
    (local-set-key (kbd "S-RET") #'euporie-send-region-or-paragraph)
    (local-set-key (kbd "S-<return>") #'euporie-send-region-or-paragraph)))

;; Also add to major mode hooks as backup
(defun euporie-setup-keybindings ()
  "Set up Shift-Enter keybindings for euporie in source code buffers."
  ;; Set keybindings in any org-src buffer or when babel-info is available
  (when (or (and (boundp 'org-src--babel-info) org-src--babel-info)
            (string-match-p "\\*Org Src" (buffer-name)))
    (local-set-key (kbd "S-RET") #'euporie-send-region-or-paragraph)
    (local-set-key (kbd "S-<return>") #'euporie-send-region-or-paragraph)))

(add-hook 'python-mode-hook #'euporie-setup-keybindings)
(add-hook 'ess-r-mode-hook #'euporie-setup-keybindings)
(add-hook 'SAS-mode-hook #'euporie-setup-keybindings)
(add-hook 'stata-mode-hook #'euporie-setup-keybindings)

