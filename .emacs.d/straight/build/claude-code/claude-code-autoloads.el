;;; claude-code-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from claude-code.el

 (autoload 'claude-code-command-map "claude-code")
 (autoload 'claude-code-transient "claude-code" nil t)
 (autoload 'claude-code-slash-commands "claude-code" nil t)
(autoload 'claude-code "claude-code" "\
Start Claude in an eat terminal and enable `claude-code-mode'.

If current buffer belongs to a project start Claude in the project's
root directory. Otherwise start in the directory of the current buffer
file, or the current value of `default-directory' if no project and no
buffer file.

With single prefix ARG (\\[universal-argument]), switch to buffer after creating.
With double prefix ARG (\\[universal-argument] \\[universal-argument]), prompt for the project directory.

(fn &optional ARG)" t)
(autoload 'claude-code-start-in-directory "claude-code" "\
Prompt for a directory and start Claude there.

This is a convenience command equivalent to using `claude-code` with
double prefix arg (\\[universal-argument] \\[universal-argument]).

With prefix ARG (\\[universal-argument]), switch to buffer after creating.

(fn &optional ARG)" t)
(autoload 'claude-code-continue "claude-code" "\
Start Claude and continue the previous conversation.

This command starts Claude with the --continue flag to resume
where you left off in your last session.

If current buffer belongs to a project start Claude in the project's
root directory. Otherwise start in the directory of the current buffer
file, or the current value of `default-directory' if no project and no
buffer file.

With prefix ARG (\\[universal-argument]), switch to buffer after creating.
With double prefix ARG (\\[universal-argument] \\[universal-argument]), prompt for the project directory.

(fn &optional ARG)" t)
(autoload 'claude-code-resume "claude-code" "\
Resume a specific Claude session.

This command starts Claude with the --resume flag to resume a specific
past session. Claude will present an interactive list of past sessions
to choose from.

If current buffer belongs to a project start Claude in the project's
root directory. Otherwise start in the directory of the current buffer
file, or the current value of `default-directory' if no project and no
 buffer file.

With double prefix ARG (\\[universal-argument] \\[universal-argument]), prompt for the project directory.

(fn ARG)" t)
(autoload 'claude-code-new-instance "claude-code" "\
Create a new Claude instance, prompting for instance name.

This command always prompts for an instance name, unlike `claude-code'
which uses \"default\" when no instances exist.

If current buffer belongs to a project start Claude in the project's
root directory. Otherwise start in the directory of the current buffer
file, or the current value of `default-directory' if no project and no
buffer file.

With single prefix ARG (\\[universal-argument]), switch to buffer after creating.
With double prefix ARG (\\[universal-argument] \\[universal-argument]), prompt
for the project directory.

(fn &optional ARG)" t)
(autoload 'claude-code-sandbox "claude-code" "\
Start Claude in sandbox mode using the configured sandbox binary.

Uses the program specified in `claude-code-sandbox-program' to run Claude
in a sandboxed environment.

Prompts whether to add --dangerously-skip-permissions flag for bypassing
Claude's permission checks.

If current buffer belongs to a project start Claude in the project's root
directory.  Otherwise start in the directory of the current buffer file,
or the current value of `default-directory' if no project and no buffer
file.

With single prefix ARG (\\[universal-argument]), switch to buffer after
creating.

With double prefix ARG (\\[universal-argument] \\[universal-argument]),
prompt for the project directory.

(fn &optional ARG)" t)
(autoload 'claude-code-send-region "claude-code" "\
Send the current region to Claude.

If no region is active, send the entire buffer if it's not too large.
For large buffers, ask for confirmation first.

With prefix ARG, prompt for instructions to add to the text before
sending. With two prefix ARGs (C-u C-u), both add instructions and
switch to Claude buffer.

(fn &optional ARG)" t)
(autoload 'claude-code-toggle "claude-code" "\
Show or hide the Claude window.

If the Claude buffer doesn't exist, create it." t)
(autoload 'claude-code--switch-to-all-instances-helper "claude-code" "\
Helper function to switch to a Claude buffer from all available instances.

Returns t if a buffer was selected and switched to, nil otherwise.")
(autoload 'claude-code-select-buffer "claude-code" "\
Select and switch to a Claude buffer from all running instances.

This command shows all Claude instances across all projects and
directories, allowing you to choose which one to switch to." t)
(autoload 'claude-code-kill "claude-code" "\
Kill Claude process and close its window." t)
(autoload 'claude-code-kill-all "claude-code" "\
Kill ALL Claude processes across all directories." t)
(autoload 'claude-code-send-command "claude-code" "\
Read a Claude command from the minibuffer and send it.

With prefix ARG, switch to the Claude buffer after sending CMD.

(fn CMD &optional ARG)" t)
(autoload 'claude-code-send-command-with-context "claude-code" "\
Read a Claude command and send it with current file and line context.

If region is active, include region line numbers.
With prefix ARG, switch to the Claude buffer after sending CMD.

(fn CMD &optional ARG)" t)
(autoload 'claude-code-send-return "claude-code" "\
Send <return> to the Claude Code REPL.

This is useful for saying Yes when Claude asks for confirmation without
having to switch to the REPL buffer." t)
(autoload 'claude-code-send-1 "claude-code" "\
Send \"1\" to the Claude Code REPL.

This selects the first option when Claude presents a numbered menu." t)
(autoload 'claude-code-send-2 "claude-code" "\
Send \"2\" to the Claude Code REPL.

This selects the second option when Claude presents a numbered menu." t)
(autoload 'claude-code-send-3 "claude-code" "\
Send \"3\" to the Claude Code REPL.

This selects the third option when Claude presents a numbered menu." t)
(autoload 'claude-code-send-escape "claude-code" "\
Send <escape> to the Claude Code REPL.

This is useful for saying \"No\" when Claude asks for confirmation without
having to switch to the REPL buffer." t)
(autoload 'claude-code-send-file "claude-code" "\
Send the specified FILE-PATH to Claude prefixed with `@'.

FILE-PATH should be an absolute path to the file to send.

(fn FILE-PATH)" t)
(autoload 'claude-code-send-buffer-file "claude-code" "\
Send the file associated with current buffer to Claude prefixed with `@'.

With prefix ARG, prompt for instructions to add to the file before sending.
With two prefix ARGs, both add instructions and switch to Claude buffer.

(fn &optional ARG)" t)
(autoload 'claude-code-cycle-mode "claude-code" "\
Send Shift-Tab to Claude to cycle between modes.

Claude uses Shift-Tab to cycle through:
- Default mode
- Auto-accept edits mode
- Plan mode" t)
(autoload 'claude-code-fork "claude-code" "\
Jump to a previous conversation by invoking the Claude fork command.

Sends <escape><escape> to the Claude Code REPL." t)
(autoload 'claude-code-fix-error-at-point "claude-code" "\
Ask Claude to fix the error at point.

Gets the error message, file name, and line number, and instructs Claude
to fix the error. Supports both flycheck and flymake error systems, as well
as any system that implements help-at-pt.

With prefix ARG, switch to the Claude buffer after sending.

(fn &optional ARG)" t)
(autoload 'claude-code-read-only-mode "claude-code" "\
Enter read-only mode in Claude buffer with visible cursor.

In this mode, you can interact with the terminal buffer just like a
regular buffer. This mode is useful for selecting text in the Claude
buffer. However, you are not allowed to change the buffer contents or
enter Claude commands.

Use `claude-code-exit-read-only-mode' to switch back to normal mode." t)
(autoload 'claude-code-exit-read-only-mode "claude-code" "\
Exit read-only mode and return to normal mode (eat semi-char mode)." t)
(autoload 'claude-code-toggle-read-only-mode "claude-code" "\
Toggle between read-only mode and normal mode.

In read-only mode you can interact with the terminal buffer just like a
regular buffer. This mode is useful for selecting text in the Claude
buffer. However, you are not allowed to change the buffer contents or
enter Claude commands." t)
(defvar claude-code-mode nil "\
Non-nil if Claude-Code mode is enabled.
See the `claude-code-mode' command
for a description of this minor mode.")
(custom-autoload 'claude-code-mode "claude-code" nil)
(autoload 'claude-code-mode "claude-code" "\
Minor mode for interacting with Claude AI CLI.

When enabled, provides functionality for starting, sending commands to,
and managing Claude sessions.

This is a global minor mode.  If called interactively, toggle the
`Claude-Code mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='claude-code-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "claude-code" '("claude-code-"))

;;; End of scraped data

(provide 'claude-code-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; claude-code-autoloads.el ends here
