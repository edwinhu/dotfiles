;;; claude-code-ide-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from claude-code-ide.el

(autoload 'claude-code-ide "claude-code-ide" "\
Run Claude Code in a terminal for the current project or directory." t)
(autoload 'claude-code-ide-resume "claude-code-ide" "\
Resume Claude Code in a terminal for the current project or directory.
This starts Claude with the -r (resume) flag to continue the previous
conversation." t)
(autoload 'claude-code-ide-continue "claude-code-ide" "\
Continue the most recent Claude Code conversation in the current directory.
This starts Claude with the -c (continue) flag to continue the most recent
conversation in the current directory." t)
(autoload 'claude-code-ide-check-status "claude-code-ide" "\
Check Claude Code CLI status." t)
(autoload 'claude-code-ide-stop "claude-code-ide" "\
Stop the Claude Code session for the current project or directory." t)
(autoload 'claude-code-ide-switch-to-buffer "claude-code-ide" "\
Switch to the Claude Code buffer for the current project.
If the buffer is not visible, display it in the configured side window.
If the buffer is already visible, switch focus to it." t)
(autoload 'claude-code-ide-list-sessions "claude-code-ide" "\
List all active Claude Code sessions and switch to selected one." t)
(autoload 'claude-code-ide-insert-at-mentioned "claude-code-ide" "\
Insert selected text into Claude prompt." t)
(autoload 'claude-code-ide-send-escape "claude-code-ide" "\
Send escape key to the Claude Code terminal buffer for the current project." t)
(autoload 'claude-code-ide-insert-newline "claude-code-ide" "\
Send newline (backslash + return) to the Claude Code terminal buffer for the current project.
This simulates typing backslash followed by Enter, which Claude Code interprets as a newline." t)
(autoload 'claude-code-ide-toggle-vterm-optimization "claude-code-ide" "\
Toggle vterm rendering optimization.
This command switches the advanced rendering optimization on or off.
Use this to balance between visual smoothness and raw responsiveness." t)
(autoload 'claude-code-ide-send-prompt "claude-code-ide" "\
Send a prompt to the Claude Code terminal.
When called interactively, reads a prompt from the minibuffer.
When called programmatically, sends the given PROMPT string.

(fn &optional PROMPT)" t)
(autoload 'claude-code-ide-toggle "claude-code-ide" "\
Toggle visibility of Claude Code window for the current project." t)
(autoload 'claude-code-ide-toggle-recent "claude-code-ide" "\
Toggle visibility of the most recent Claude Code window.
If any Claude window is visible, hide all of them.
If no Claude windows are visible, show the most recently accessed one." t)
(register-definition-prefixes "claude-code-ide" '("claude-code-ide-"))


;;; Generated autoloads from claude-code-ide-debug.el

(autoload 'claude-code-ide-show-debug "claude-code-ide-debug" "\
Show the debug buffer." t)
(autoload 'claude-code-ide-clear-debug "claude-code-ide-debug" "\
Clear the debug buffer." t)
(register-definition-prefixes "claude-code-ide-debug" '("claude-code-ide-"))


;;; Generated autoloads from claude-code-ide-diagnostics.el

(register-definition-prefixes "claude-code-ide-diagnostics" '("claude-code-ide-"))


;;; Generated autoloads from claude-code-ide-emacs-tools.el

(autoload 'claude-code-ide-emacs-tools-setup "claude-code-ide-emacs-tools" "\
Set up Emacs MCP tools for Claude Code IDE." t)
(register-definition-prefixes "claude-code-ide-emacs-tools" '("claude-code-ide-mcp-"))


;;; Generated autoloads from claude-code-ide-mcp.el

(register-definition-prefixes "claude-code-ide-mcp" '("claude-code-ide-mcp-" "mcp-error"))


;;; Generated autoloads from claude-code-ide-mcp-handlers.el

(register-definition-prefixes "claude-code-ide-mcp-handlers" '("claude-code-ide-mcp-"))


;;; Generated autoloads from claude-code-ide-mcp-http-server.el

(register-definition-prefixes "claude-code-ide-mcp-http-server" '("claude-code-ide-mcp-http-server-"))


;;; Generated autoloads from claude-code-ide-mcp-server.el

(register-definition-prefixes "claude-code-ide-mcp-server" '("claude-code-ide-"))


;;; Generated autoloads from claude-code-ide-transient.el

 (autoload 'claude-code-ide-menu "claude-code-ide-transient" "Claude Code IDE main menu." t)
(register-definition-prefixes "claude-code-ide-transient" '("claude-code-ide-"))

;;; End of scraped data

(provide 'claude-code-ide-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; claude-code-ide-autoloads.el ends here
